openapi: 3.0.0
info:
  title: Attendence checking API
  description: API for managing courses, sessions, attendance, enrollments, and convocations
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /student:
    get:
      tags:
        - Student
      summary: Get all students inside the school
      operationId: showAllStudent
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
  /student/{studentId}:
    get:
      tags:
        - Student
      summary: Get a student by ID
      operationId: readOne
      parameters:
        - name: studentId
          in: path
          required: true
          description: ID of the student to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Student not found
    delete:
      tags:
        - Student
      summary: Delete a student by ID
      operationId: deleteStudent
      parameters:
        - name: api_key
          in: header
          description: API key for authorization (optional)
          required: false
          schema:
            type: string
        - name: studentId
          in: path
          required: true
          description: ID of the student to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Student deleted successfully, no content returned
        '400':
          description: StudentId not found
    put:
      tags:
        - Student
      summary: Update a student by ID
      operationId: updateStudent
      parameters:
        - name: studentId
          in: path
          required: true
          description: ID of the student to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Student object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Updated student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Student not found
  /newStudent:
    post:
      tags:
        - Student
      summary: Add a new student
      description: Add a new Student
      operationId: createNewStudent
      requestBody:
        description: Student object that needs to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        '200':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Invalid input
  /student/{studentId}/attendances:
    get:
      tags:
        - Student
      summary: Get all absences for one given student
      operationId: getAttendanceByStudentId
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of attendance records for the specified student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendance'
        '404':
          description: No attendance records found for the given student ID
  /teacher:
    get:
      tags:
        - Teacher
      summary: Get all teachers inside the school
      operationId: getAllTeachers
      responses:
        '200':
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
  /newTeacher:
    post:
      tags:
        - Teacher
      summary: Add a new Teacher
      description: Add a new Teacher
      operationId: createTeacher
      requestBody:
        description: Teacher object that needs to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        '200':
          description: Teacher created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Invalid input
  /teacher/{teacherId}:
    get:
      tags:
        - Teacher
      summary: Get a Teacher by ID
      operationId: getTeacherById
      parameters:
        - name: teacherId
          in: path
          required: true
          description: ID of the teacher to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Teacher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Teacher not found
    delete:
      tags:
        - Teacher
      summary: Delete a Teacher by ID
      operationId: deleteTeacher
      parameters:
        - name: teacherId
          in: path
          required: true
          description: ID of the teacher to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Teacher deleted successfully
        '400':
          description: TeacherId not found
    put:
      tags:
        - Teacher
      summary: Update a teacher by ID
      operationId: updateTeacher
      parameters:
        - name: teacherId
          in: path
          required: true
          description: ID of the teacher to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Teacher object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: Updated teacher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Teacher not found
  /courses:
    get:
      tags:
        - Courses
      summary: Retrieve all courses
      responses:
        '200':
          description: A list of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      tags:
        - Courses
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /courses/{courseId}:
    get:
      tags:
        - Courses
      summary: Retrieve a single course by ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A course object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Course not found
    put:
      tags:
        - Courses
      summary: Update a course by ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      tags:
        - Courses
      summary: Delete a course by ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Course deleted successfully
  /courses/teacher:
    get:
      tags:
        - Courses
      summary: Retrieve all courses with their associated teachers
      operationId: getCourseWithTeacher
      responses:
        '200':
          description: A list of courses with their teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /courses/teacher/{teacherId}:
    get:
      tags:
        - Courses
      summary: Retrieve courses by teacher ID
      operationId: getCourseWithTeacherById
      parameters:
        - name: teacherId
          in: path
          required: true
          description: ID of the teacher to retrieve courses for
          schema:
            type: integer
      responses:
        '200':
          description: A list of courses for the specified teacher
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '404':
          description: No courses found for the given teacher ID
  /sessions:
    get:
      tags:
        - Sessions
      summary: Retrieve all sessions
      responses:
        '200':
          description: A list of sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'

    post:
      tags:
        - Sessions
      summary: Create a new session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
  /sessions/course/{courseId}:
    get:
      tags:
        - Sessions
      summary: Retrieve a single session by CourseId
      operationId: getSessionByCourseId
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A session object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Session not found
  /sessions/{sessionId}:
    get:
      tags:
        - Sessions
      summary: Retrieve a single session by ID
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A session object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Session not found

    put:
      tags:
        - Sessions
      summary: Update a session by ID
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

    delete:
      tags:
        - Sessions
      summary: Delete a session by ID
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Session deleted successfully

  /attendances:
    get:
      tags:
        - Attendances
      summary: Retrieve all attendance records
      responses:
        '200':
          description: A list of attendance records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendance'
    post:
      tags:
        - Attendances
      summary: Create a new attendance record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
      responses:
        '200':
          description: Attendance record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'

  /attendances/{attendanceId}:
    get:
      tags:
        - Attendances
      summary: Retrieve a single attendance record by ID
      parameters:
        - name: attendanceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An attendance record object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
        '404':
          description: Attendance record not found

    put:
      tags:
        - Attendances
      summary: Update an attendance record by ID
      parameters:
        - name: attendanceId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
      responses:
        '200':
          description: Attendance record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'

    delete:
      tags:
        - Attendances
      summary: Delete an attendance record by ID
      parameters:
        - name: attendanceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Attendance record deleted successfully
  /attendances/session/{sessionId}:
    get:
      tags:
        - Attendances
      summary: Retrieve attendance records by session ID
      operationId: getAttendanceBySessionId
      parameters:
        - name: sessionId
          in: path
          required: true
          description: ID of the session to retrieve attendance for
          schema:
            type: integer
      responses:
        '200':
          description: A list of attendance records for the specified session
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendance'
        '404':
          description: No attendance records found for the given session ID
  /enrollments:
    get:
      tags:
        - Enrollments
      summary: Retrieve all enrollments
      responses:
        '200':
          description: A list of enrollments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollment'

    post:
      tags:
        - Enrollments
      summary: Create a new enrollment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '200':
          description: Enrollment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'

  /enrollments/{enrollmentId}:
    get:
      tags:
        - Enrollments
      summary: Retrieve a single enrollment by ID
      parameters:
        - name: enrollmentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An enrollment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
        '404':
          description: Enrollment not found

    put:
      tags:
        - Enrollments
      summary: Update an enrollment by ID
      parameters:
        - name: enrollmentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '200':
          description: Enrollment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'

    delete:
      tags:
        - Enrollments
      summary: Delete an enrollment by ID
      parameters:
        - name: enrollmentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Enrollment deleted successfully
  /enrollments/course:
    get:
      tags:
        - Enrollments
      summary: Retrieve all students with their enrolled courses
      operationId: getAllStudentWithCourse
      responses:
        '200':
          description: A list of enrollments with student-course associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollment'

  /enrollments/course/{courseId}:
    get:
      tags:
        - Enrollments
      summary: Retrieve students enrolled in a specific course
      operationId: getStudentsWithCourseById
      parameters:
        - name: courseId
          in: path
          required: true
          description: ID of the course to retrieve enrolled students for
          schema:
            type: integer
      responses:
        '200':
          description: A list of students enrolled in the specified course
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollment'
        '404':
          description: No students found for the given course ID
  /convocations:
    get:
      tags:
        - Convocations
      summary: Retrieve all convocations
      operationId: showAllConvocations
      responses:
        '200':
          description: A list of convocations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Convocation'

    post:
      tags:
        - Convocations
      summary: Create a new convocation
      operationId: createConvocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Convocation'
      responses:
        '200':
          description: Convocation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Convocation'

  /convocations/{convocationId}:
    get:
      tags:
        - Convocations
      summary: Retrieve a single convocation by ID
      operationId: readConvocationById
      parameters:
        - name: convocationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A convocation object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Convocation'
        '404':
          description: Convocation not found

    put:
      tags:
        - Convocations
      summary: Update a convocation by ID
      operationId: updateConvocationById
      parameters:
        - name: convocationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Convocation'
      responses:
        '200':
          description: Convocation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Convocation'
    delete:
      tags:
        - Convocations
      summary: Delete a convocation by ID
      operationId: deleteConvocationById
      parameters:
        - name: convocationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Convocation deleted successfully
components:
  schemas:
    Course:
      type: object
      properties:
        courseId:
          type: integer
        courseName:
          type: string
        teacher:
          type: object
          properties:
            teacherId:
              type: integer
            name:
              type: string
    Session:
      type: object
      properties:
        sessionId:
          type: integer
        sessionDate:
          type: string
          format: date-time
        course:
          $ref: '#/components/schemas/Course'

    Attendance:
      type: object
      properties:
        attendenceId:
          type: integer
        attendingStatus:
          $ref: '#/components/schemas/AttendingStatus'
        justifiedStatus:
          $ref: '#/components/schemas/JustifiedStatus'
        proof:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        student:
          type: object
          properties:
            studentId:
              type: integer
            name:
              type: string

    Enrollment:
      type: object
      properties:
        idEnrollment:
          type: integer
        student:
          type: object
          properties:
            studentId:
              type: integer
            name:
              type: string
        course:
          $ref: '#/components/schemas/Course'

    Convocation:
      type: object
      properties:
        idConvocation:
          type: integer
        teacher:
          type: object
          properties:
            teacherId:
              type: integer
            name:
              type: string
        student:
          type: object
          properties:
            studentId:
              type: integer
            name:
              type: string
        convocationDate:
          type: string
          format: date-time
        reason:
          type: string
    Student:
      type: object
      properties:
        studentId:
          type: integer
        lastName:
          type: string
        firstName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        studentEmail:
          type: string
        phoneNumber:
          type: string
        enrollmentDate:
          type: string
          format: date-time
        academicYear:
          $ref: '#/components/schemas/AcademicYear'
    AcademicYear:
      type: string
      enum:
        - L1
        - L2
        - L3
    AttendingStatus:
      type: string
      enum:
        - MISSING
        - ATTENDING
    JustifiedStatus:
      type: string
      enum:
        - JUSTIFIED
        - NOT_JUSTIFIED
    Teacher:
      type: object
      properties:
        teacherId:
          type: integer
        lastName:
          type: string
        firstName:
          type: string
        contact:
          type: string
        teacherAddress:
          type: string